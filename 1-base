#!/bin/sh

#  TODO: TIPS -> If the installation fail at a certain point, 1: inside the arch-install, run vim install.log
# 2: check what's the last step done by the script beffore failing.
# 3: if the script stop at installing base packages, run {rm -rf /var/lib/pacman/db.lck && pac --init && --populate} 

# TODO: resume install script that gonna be able to check the log and see where to script stop and start from the last part of the previous execution


function list_disks() {
	lsblk -o "PATH,FSTYPE,UUID,LABEL,SIZE,TYPE,MOUNTPOINT" -An \
	| grep part \
	| fzf --reverse --ansi --header "Choose your \n[\e[1;33m${1}\e[0m partition:" --header-first --height 30%
}


function on_error() {
	if [ $? -ne 0 ]; then
     	echo -e "\e[1A\e[K${ERROR} - $THEME2 install had failed, please check the install.log"
     	exit 1
 	fi
}

function get_partitions() {
		# Home and swap with OPTIONAL Flag 
	ROOT_PART=$(list_disks "root")
	BOOT_PART=$(list_disks "boot")
			
}

function format_partitions() {
	echo	
}

function mount_partitions() {
	echo
}

function disk_manager() {
	get_partitions
	format_partitions
	mount_partitions
}

function root_part(){
	if [ "$ROOT_PART" ]; then
		root_part $ROOT_PART
	else
		echo -e "$ERROR - You didn't choose a root partition"
		read -rep $'\n[\e[1;33mACTION\e[0m] - Choose the root partition(e.g /dev/sdx1): ' ROOT_PART
	fi
	echo -e "$NOTE - Formating ${1} as ext4..."
	mkfs.ext4 $1
	echo -e "$NOTE - Mounting $1 at /mnt"
	mount $1 /mnt		
}

function boot_part(){
	read -rep $'\n[\e[1;33mACTION\e[0m] - Choose the boot partition(e.g /dev/sdx1): ' BOOT_PART
	[ "$BOOT_PART" ] && boot_part $BOOT_PART && sleep 1
	echo -e "$NOTE - Formating ${1} as vfat..."
	mkfs.fat -F32 $1
	echo -e "$NOTE - Making the /boot/efi directory at /mnt"
	[ ! -d  /mnt/boot/efi ] && mkdir -p /mnt/boot/efi
	echo -e "$NOTE - Mounting $1 at /mnt/boot/efi"
	mount $1 /mnt/boot/efi
}

function home_part(){
	read -rep $'\n[\e[1;33mACTION\e[0m] - Choose the home partition (leave blank if none): ' HOME_PART
	[ "$HOME_PART" ] && home_part $HOME_PART && sleep 1
	read -rep $'[\e[1;33mACTION\e[0m] - Would you like to format the home partition? (y,n) ' FORMAT_HOME
	if [[ $FORMAT_HOME =~ ^[Yy]$ ]]; then
		echo -e "$NOTE - Formating ${1} to ext4..."
		mkfs.ext4 $1
		echo -e "$NOTE - Creating the home directory at /mnt/home"
		[ ! -d /mnt/home ] && mkdir /mnt/home
		echo -e "$NOTE - Mounting $1 at /mnt/home"
		mount $1 /mnt/home
	else
		echo -e "$NOTE - Creating the home directory at /mnt/home"
		[ ! -d /mnt/home ] && mkdir /mnt/home
		echo -e "$NOTE - Mounting $1 at /mnt/home"
		mount $1 /mnt/home
	fi
}

function swap_part(){	
	read -rep $'\n[\e[1;33mACTION\e[0m] - Choose the \e[0;34m\033[1mswap\e[0;37m partition (leave blank if none): ' SWAP_PART
	[ "$SWAP_PART" ] && swap_part $SWAP_PART && sleep 1
	echo -e "$NOTE - Formating ${1} as swap..."
	mkswap $1
	echo -e "$NOTE - Activating the swap partition..."
	swapon $1
}

function notice() {
	echo -e "$WARNING - This script don't have yet the ability to partitionned disk so you have to carry it yourself.\n\n"
	sleep 1
	echo -e "$NOTE - You going to be ask to give the differents partitions that you want to use for this installation.\n\n"
	sleep 1
}

function start_install() {
	read -n -rep $'[\e[1;33mACTION\e[0m] - Would you like to start the installation of Arch Linux? (y,n) ' START_INSTALL

	if [[ $START_INSTALL =~ ^[Yy]$ ]]; then
		clear && sleep 1
		# in ASCII caracters here
		echo -e "\t\tFrom ${m}Zero${w} to ${g}Arch Linux${w}\n\n"
		sleep 1
	else
		echo -e "\n\nPlease make sure to ${y}partition your disk${w} before relaunching the script."
		exit 1
	fi
}

function pacstrap() {
	read -rep $'\n[\e[1;33mACTION\e[0m] - Shall we start with pacstrap? ' BASE_INSTALL
	
	pacman -Sy archlinux-keyring --noconfirm
	pacstrap -KP /mnt base base-devel linux linux-firmware git micro
}

function fstab() {
	echo -ne "$NOTE - Now generating the ${y}fstab${w} file at /mnt/etc/fstab"
	genfstab -U /mnt >> /mnt/etc/fstab
	cat /mnt/etc/fstab
	sleep 1
	echo -e "\r$OK - The ${y}fstab${w} file has been generated at /mnt/etc/fstab"
}

function launch_secondScript() {
	echo -ne "$NOTE - Copying the second part of the script(${y}setup${w} at /mnt/root)"
	cp 'setup' /mnt/root && chmod +x '/mnt/root/setup'
	echo -e "\r$OK - The second part of the script(${y}setup${w} has been move to /mnt/root)"
}

function chroot_mnt() {
	read -rep $'\n[\e[1;33mACTION\e[0m] - Do you want to chroot to the fresh install? (y,n) ' CHROOT
	sleep 1
	[[ $CHROOT =~ ^[Yy]$ ]] && arch-chroot /mnt
	echo -e "$NOTE - After ${y}chroot${w} to the fresh install at ${m}/mnt${w}, run '/root/setup' to complete the installation"
}

main() {
	r="\e[0;31m\033[1m"
	b="\e[0;34m\033[1m"
	g="\e[0;36m\033[1m"
	m="\e[0;35m\033[1m"
	y="\e[0;33m"
	w="\e[0;37m"

	NOTE="[\e[1;36mNOTE\e[0m]"
	ATTENTION="[\e[1;37mATTENTION\e[0m]"
	WARNING="[\e[1;35mWARNING\e[0m]"
	OK="[\e[1;32mOK\e[0m]"
	ERROR="[\e[1;31mERROR\e[0m]"
	ACTION="[\e[1;33mACTION\e[0m]"
	install_log="install.log"
	set -e
	
	notice
	start_install
	disk_manager
	pacstrap
	fstab
	launch_secondScript
	chroot_mnt
}

# main

list_disks

